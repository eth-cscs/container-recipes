include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

stages:
  - baseimage
  - build
  - test

build base cuda image:
  extends: .container-builder
  stage: baseimage
  # we create a tag that depends on the SHA value of ci/baseimage.Dockerfile, this way
  # a new base image is only built when the SHA of this file changes
  # If there are more dependency files that should change the tag-name of the base container
  # image, they can be added too.
  # Since the base image name is runtime dependent, we need to carry the value of it to
  # the following jobs via a dotenv file.
  before_script:
  - DOCKER_TAG=`sha256sum ci/baseimage.Dockerfile | head -c 16`
  - export PERSIST_IMAGE_NAME=$CSCS_REGISTRY_PATH/base/sirius-ci:$DOCKER_TAG
  - echo "BASE_IMAGE=$PERSIST_IMAGE_NAME" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  variables:
    DOCKERFILE: ci/baseimage.Dockerfile
    # change to 'always' if you want to rebuild, even if target tag exists already (if-not-exists is the default, i.e. we could also skip the variable)
    CSCS_REBUILD_POLICY: if-not-exists
    DOCKER_BUILD_ARGS: '["CUDA_ARCH=60"]'

build base rocm image:
  extends: .container-builder
  stage: baseimage
  timeout: 4h
  # we create a tag that depends on the SHA value of ci/baseimage.Dockerfile, this way
  # a new base image is only built when the SHA of this file changes
  # If there are more dependency files that should change the tag-name of the base container
  # image, they can be added too.
  # Since the base image name is runtime dependent, we need to carry the value of it to
  # the following jobs via a dotenv file.
  before_script:
  - DOCKER_TAG=`sha256sum ci/baseimage.rocm.Dockerfile | head -c 16`
  - export PERSIST_IMAGE_NAME=$CSCS_REGISTRY_PATH/base/sirius-ci:$DOCKER_TAG
  - echo "BASE_IMAGE=$PERSIST_IMAGE_NAME" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  variables:
    DOCKERFILE: ci/baseimage.rocm.Dockerfile
    # change to 'always' if you want to rebuild, even if target tag exists already (if-not-exists is the default, i.e. we could also skip the variable)
    CSCS_REBUILD_POLICY: if-not-exists
    DOCKER_BUILD_ARGS: '["ROCM_ARCH=gfx90a"]'

build cuda image:
  extends: .container-builder
  needs: ["build base cuda image"]
  stage: build
  variables:
    DOCKERFILE: ci/build.Dockerfile
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/sirius/sirius-ci:$CI_COMMIT_SHA
    SPEC: 'sirius@develop %gcc build_type=RelWithDebInfo +tests +apps +cuda +scalapack ^mpich ^intel-oneapi-mkl+cluster'
    DOCKER_BUILD_ARGS: '["BASE_IMAGE=${BASE_IMAGE}", "SPECDEV=$SPEC"]'

build rocm image:
  extends: .container-builder
  needs: ["build base rocm image"]
  stage: build
  variables:
    DOCKERFILE: ci/build.Dockerfile
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/sirius/sirius-ci-rocm:$CI_COMMIT_SHA
    SPEC: 'sirius@develop %gcc build_type=RelWithDebInfo ~fortran+tests +apps +rocm +scalapack ^mpich ^openblas'
    DOCKER_BUILD_ARGS: '["BASE_IMAGE=${BASE_IMAGE}", "SPECDEV=$SPEC"]'

.run_tests:
  extends: .container-runner-daint-gpu
  needs: ["build cuda image"]
  stage: test
  script:
    - cd /sirius-src/spack-build
    - |
      if [ "$SLURM_PROCID" == "0" ]; then
        $TEST_COMMAND -V
      else
        $TEST_COMMAND --output-on-failure
      fi
  image: $CSCS_REGISTRY_PATH/sirius/sirius-ci:$CI_COMMIT_SHA
  variables:
    CRAY_CUDA_MPS: 1
    GIT_STRATEGY: none
    MPICH_MAX_THREAD_SAFETY: multiple
    CSCS_REGISTRY_LOGIN: 'YES'
    PULL_IMAGE: 'YES'
    SLURM_HINT: nomultithread
    SLURM_JOB_NUM_NODES: 1
    SLURM_UNBUFFEREDIO: ''
    SLURM_WAIT: 0

